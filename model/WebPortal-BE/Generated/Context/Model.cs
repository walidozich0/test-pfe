//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 24-05-2025 09:37:07
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BD.PublicPortal.Core
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        public Model(DbContextOptions<Model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<BloodDonationRequest> BloodDonationRequests
        {
            get;
            set;
        }

        public virtual DbSet<BloodTansfusionCenter> BloodTansfusionCenters
        {
            get;
            set;
        }

        public virtual DbSet<Wilaya> Wilayas
        {
            get;
            set;
        }

        public virtual DbSet<BloodDonationPledge> BloodDonationPledges
        {
            get;
            set;
        }

        public virtual DbSet<DonorBloodTransferCenterSubscriptions> DonorBloodTransferCenterSubscriptions
        {
            get;
            set;
        }

        public virtual DbSet<ApplicationUser> ApplicationUsers
        {
            get;
            set;
        }

        public virtual DbSet<Commune> Communes
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration<BloodDonationRequest>(new BloodDonationRequestConfiguration());
            modelBuilder.ApplyConfiguration<BloodTansfusionCenter>(new BloodTansfusionCenterConfiguration());
            modelBuilder.ApplyConfiguration<Wilaya>(new WilayaConfiguration());
            modelBuilder.ApplyConfiguration<BloodDonationPledge>(new BloodDonationPledgeConfiguration());
            modelBuilder.ApplyConfiguration<DonorBloodTransferCenterSubscriptions>(new DonorBloodTransferCenterSubscriptionsConfiguration());
            modelBuilder.ApplyConfiguration<ApplicationUser>(new ApplicationUserConfiguration());
            modelBuilder.ApplyConfiguration<Commune>(new CommuneConfiguration());
            CustomizeMapping(ref modelBuilder);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
