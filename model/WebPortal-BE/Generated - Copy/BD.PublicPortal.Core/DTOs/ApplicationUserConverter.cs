//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 22-05-2025 07:35:03
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace BD.PublicPortal.Core
{

    public static partial class ApplicationUserConverter
    {

        public static ApplicationUserDTO ToDto(this ApplicationUser source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ApplicationUserDTO ToDtoWithRelated(this ApplicationUser source, int level)
        {
            if (source == null)
              return null;

            var target = new ApplicationUserDTO();

            // Properties
            target.Id = source.Id;
            target.CorrelationId = source.CorrelationId;
            target.IsAdmin = source.IsAdmin;
            target.DonorWantToStayAnonymous = source.DonorWantToStayAnonymous;
            target.DonorExcludeFromPublicPortal = source.DonorExcludeFromPublicPortal;
            target.DonorAvailability = source.DonorAvailability;
            target.DonorContactMethod = source.DonorContactMethod;
            target.DonorName = source.DonorName;
            target.DonorBirthDate = source.DonorBirthDate;
            target.DonorBloodGroup = source.DonorBloodGroup;
            target.DonorNIN = source.DonorNIN;
            target.DonorTel = source.DonorTel;
            target.DonorNotesForBTC = source.DonorNotesForBTC;
            target.DonorLastDonationDate = source.DonorLastDonationDate;
            target.CommuneId = source.CommuneId;

            // Navigation Properties
            if (level > 0) {
              target.DonorBloodTransferCenterSubscriptions = source.DonorBloodTransferCenterSubscriptions.ToDtosWithRelated(level - 1);
              target.BloodDonationPledges = source.BloodDonationPledges.ToDtosWithRelated(level - 1);
              target.Commune = source.Commune.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static ApplicationUser ToEntity(this ApplicationUserDTO source)
        {
            if (source == null)
              return null;

            var target = new ApplicationUser();

            // Properties
            target.Id = source.Id;
            target.CorrelationId = source.CorrelationId;
            target.IsAdmin = source.IsAdmin;
            target.DonorWantToStayAnonymous = source.DonorWantToStayAnonymous;
            target.DonorExcludeFromPublicPortal = source.DonorExcludeFromPublicPortal;
            target.DonorAvailability = source.DonorAvailability;
            target.DonorContactMethod = source.DonorContactMethod;
            target.DonorName = source.DonorName;
            target.DonorBirthDate = source.DonorBirthDate;
            target.DonorBloodGroup = source.DonorBloodGroup;
            target.DonorNIN = source.DonorNIN;
            target.DonorTel = source.DonorTel;
            target.DonorNotesForBTC = source.DonorNotesForBTC;
            target.DonorLastDonationDate = source.DonorLastDonationDate;
            target.CommuneId = source.CommuneId;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ApplicationUserDTO> ToDtos(this IEnumerable<ApplicationUser> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ApplicationUserDTO> ToDtosWithRelated(this IEnumerable<ApplicationUser> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<ApplicationUser> ToEntities(this IEnumerable<ApplicationUserDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(ApplicationUser source, ApplicationUserDTO target);

        static partial void OnEntityCreating(ApplicationUserDTO source, ApplicationUser target);

    }

}
